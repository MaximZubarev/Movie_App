// Generated by Dagger (https://dagger.dev).
package com.mldz.feature_main_impl.di;

import com.mldz.core_network_api.data.HttpClient;
import com.mldz.feature_main_api.MainScreenStarter;
import com.mldz.feature_main_impl.data.MovieRepositoryImpl;
import com.mldz.feature_main_impl.data.MovieRepositoryImpl_Factory;
import com.mldz.feature_main_impl.presentation.MainViewModel;
import com.mldz.feature_main_impl.start.MainScreenImpl_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerMainFeatureComponent {
  private DaggerMainFeatureComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private MainFeatureDependencies mainFeatureDependencies;

    private Builder() {
    }

    public Builder mainFeatureDependencies(MainFeatureDependencies mainFeatureDependencies) {
      this.mainFeatureDependencies = Preconditions.checkNotNull(mainFeatureDependencies);
      return this;
    }

    public MainFeatureComponent build() {
      Preconditions.checkBuilderRequirement(mainFeatureDependencies, MainFeatureDependencies.class);
      return new MainFeatureComponentImpl(mainFeatureDependencies);
    }
  }

  private static final class MainFeatureComponentImpl implements MainFeatureComponent {
    private final MainFeatureComponentImpl mainFeatureComponentImpl = this;

    private Provider<MainScreenStarter> provideMainScreenProvider;

    private Provider<HttpClient> httpClientProvider;

    private Provider<MovieRepositoryImpl> movieRepositoryImplProvider;

    private MainFeatureComponentImpl(MainFeatureDependencies mainFeatureDependenciesParam) {

      initialize(mainFeatureDependenciesParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainFeatureDependencies mainFeatureDependenciesParam) {
      this.provideMainScreenProvider = DoubleCheck.provider((Provider) MainScreenImpl_Factory.create());
      this.httpClientProvider = new HttpClientProvider(mainFeatureDependenciesParam);
      this.movieRepositoryImplProvider = DoubleCheck.provider(MovieRepositoryImpl_Factory.create(httpClientProvider));
    }

    @Override
    public MainScreenStarter mainScreen() {
      return provideMainScreenProvider.get();
    }

    @Override
    public MainViewModel getViewModel() {
      return new MainViewModel(movieRepositoryImplProvider.get());
    }

    private static final class HttpClientProvider implements Provider<HttpClient> {
      private final MainFeatureDependencies mainFeatureDependencies;

      HttpClientProvider(MainFeatureDependencies mainFeatureDependencies) {
        this.mainFeatureDependencies = mainFeatureDependencies;
      }

      @Override
      public HttpClient get() {
        return Preconditions.checkNotNullFromComponent(mainFeatureDependencies.httpClient());
      }
    }
  }
}
