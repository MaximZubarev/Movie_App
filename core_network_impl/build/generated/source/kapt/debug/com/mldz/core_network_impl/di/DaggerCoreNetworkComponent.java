// Generated by Dagger (https://dagger.dev).
package com.mldz.core_network_impl.di;

import com.mldz.core_network_api.data.HttpClient;
import com.mldz.core_network_impl.data.HttpClientImpl;
import com.mldz.core_network_impl.data.HttpClientImpl_Factory;
import com.mldz.core_network_impl.retrofit.MovieApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerCoreNetworkComponent {
  private DaggerCoreNetworkComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static CoreNetworkComponent create() {
    return new Builder().build();
  }

  public static final class Builder {
    private RetrofitModule retrofitModule;

    private Builder() {
    }

    public Builder retrofitModule(RetrofitModule retrofitModule) {
      this.retrofitModule = Preconditions.checkNotNull(retrofitModule);
      return this;
    }

    public CoreNetworkComponent build() {
      if (retrofitModule == null) {
        this.retrofitModule = new RetrofitModule();
      }
      return new CoreNetworkComponentImpl(retrofitModule);
    }
  }

  private static final class CoreNetworkComponentImpl extends CoreNetworkComponent {
    private final CoreNetworkComponentImpl coreNetworkComponentImpl = this;

    private Provider<Interceptor> provideApiKeyInterceptorProvider;

    private Provider<HttpLoggingInterceptor> provideLoggingInterceptorProvider;

    private Provider<OkHttpClient> provideOkHttpProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<MovieApi> provideApiProvider;

    private Provider<HttpClientImpl> httpClientImplProvider;

    private Provider<HttpClient> provideHttpClientProvider;

    private CoreNetworkComponentImpl(RetrofitModule retrofitModuleParam) {

      initialize(retrofitModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final RetrofitModule retrofitModuleParam) {
      this.provideApiKeyInterceptorProvider = DoubleCheck.provider(RetrofitModule_ProvideApiKeyInterceptorFactory.create(retrofitModuleParam));
      this.provideLoggingInterceptorProvider = DoubleCheck.provider(RetrofitModule_ProvideLoggingInterceptorFactory.create(retrofitModuleParam));
      this.provideOkHttpProvider = DoubleCheck.provider(RetrofitModule_ProvideOkHttpFactory.create(retrofitModuleParam, provideApiKeyInterceptorProvider, provideLoggingInterceptorProvider));
      this.provideRetrofitProvider = DoubleCheck.provider(RetrofitModule_ProvideRetrofitFactory.create(retrofitModuleParam, provideOkHttpProvider));
      this.provideApiProvider = DoubleCheck.provider(RetrofitModule_ProvideApiFactory.create(retrofitModuleParam, provideRetrofitProvider));
      this.httpClientImplProvider = HttpClientImpl_Factory.create(provideApiProvider);
      this.provideHttpClientProvider = DoubleCheck.provider((Provider) httpClientImplProvider);
    }

    @Override
    public HttpClient httpClient() {
      return provideHttpClientProvider.get();
    }
  }
}
