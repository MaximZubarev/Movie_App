// Generated by Dagger (https://dagger.dev).
package com.mldz.core_network_impl.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RetrofitModule_ProvideOkHttpFactory implements Factory<OkHttpClient> {
  private final RetrofitModule module;

  private final Provider<Interceptor> apiKeyInterceptorProvider;

  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  public RetrofitModule_ProvideOkHttpFactory(RetrofitModule module,
      Provider<Interceptor> apiKeyInterceptorProvider,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    this.module = module;
    this.apiKeyInterceptorProvider = apiKeyInterceptorProvider;
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttp(module, apiKeyInterceptorProvider.get(), httpLoggingInterceptorProvider.get());
  }

  public static RetrofitModule_ProvideOkHttpFactory create(RetrofitModule module,
      Provider<Interceptor> apiKeyInterceptorProvider,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    return new RetrofitModule_ProvideOkHttpFactory(module, apiKeyInterceptorProvider, httpLoggingInterceptorProvider);
  }

  public static OkHttpClient provideOkHttp(RetrofitModule instance, Interceptor apiKeyInterceptor,
      HttpLoggingInterceptor httpLoggingInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttp(apiKeyInterceptor, httpLoggingInterceptor));
  }
}
